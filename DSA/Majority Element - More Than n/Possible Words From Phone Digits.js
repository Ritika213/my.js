//given a keypad (as shown in the diagram) and an array arr[ ] containing digits, your task is to list all possible words 
//in any order which can be generated by pressing numbers in arr[] sequentially.

//Note: Number 0 and 1 do not map to any letters.
//You can return the words in any order, the driver code will print them in sorted order.



Examples :Input: arr = [2, 3]
Output: [ad, ae, af, bd, be, bf, cd, ce, cf]
Explanation:// When we press 2 and 3 total 3 x 3 = 9 possible words formed.
Input: arr = [2]
Output: [a, b, c]
Explanation:// When we press 2 total 3 possible words formed.
Constraints
//1 ≤ arr.size() ≤ 9
//0 ≤ arr[i] ≤ 9     

/**
 * @param {number[]} arr
 * @returns {string[]}
 */
class Solution {
    possibleWords(arr) {
        const mapping = {
            2: ["a", "b", "c"],
            3: ["d", "e", "f"],
            4: ["g", "h", "i"],
            5: ["j", "k", "l"],
            6: ["m", "n", "o"],
            7: ["p", "q", "r", "s"],
            8: ["t", "u", "v"],
            9: ["w", "x", "y", "z"]
        };

        let result = [];

        // define backtrack as an inner function (arrow keeps `this` context clean)
        const backtrack = (index, current) => {
            if (index === arr.length) {
                result.push(current);
                return;
            }

            let digit = arr[index];
            if (digit === 0 || digit === 1) {
                // skip invalid digits
                backtrack(index + 1, current);
                return;
            }

            for (let char of mapping[digit]) {
                backtrack(index + 1, current + char);
            }
        };

        if (arr.length === 0) return result;

        backtrack(0, "");
        return result;
    }
}
